IMP : Please refer to class 'ListOfDoctorsViewModel' which populates and initializes mock data for unit testing.

1) Unit Tests for whole functionality:

        (Input Doctor Id)
        ip : Input doctor Id = 1
        expected op : [5,6,3,2,4] ...... (Ids of top 5 similar doctors)
        actual op   : [5,6,3,2,4]

        ip : Input doctor Id = 2
        expected op : [5,4,1,3,6] ...... (Ids of top 5 similar doctors)
        actual op   : [5,4,1,3,6]

        ip : Input doctor Id = 3
        expected op : [1,6,4,5,2] ...... (Ids of top 5 similar doctors)
        actual op   : [1,6,4,5,2]

        ip : Input doctor Id = 12
        expected op : Please select valid entry ...... (There does not exist any doctor with id 12 in mock data)
        actual op   : Please select valid entry

2) Unit tests for method 'ComputeSimilarityWeights()':

        ip : Input doctor Id = 1
        expected op : {[2,4],[3,8],[4,3],[5,11],[6,10]} ...... ([key,value] pairs of every other doctor in the list. 
                                                                 Key represents 'doctor id' and value represents 'similarity weight' 
                                                                 with respect to input doctor)
        actual op   : {[2,4],[3,8],[4,3],[5,11],[6,10]}


3) Unit tests for method 'SortAndFilterSimilarityWeights()':
        ip : Input doctor Id = 1
        expected op : {[5,11],[6,10],[3,8],[2,4],[4,3]} ...... (top 5 sorted [key,value] pairs of every other doctor in the list. 
                                                                 'Key' represents 'doctor id' and 'value' represents 'similarity weight' 
                                                                 with respect to input doctor)
        actual op   : {[5,11],[6,10],[3,8],[2,4],[4,3]}